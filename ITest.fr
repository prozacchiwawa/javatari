--- Demonstration of terminal input/output
module examples.ITest where

import Prelude.PreludeArrays
import Test.QuickCheck
import examples.Util
import examples.FFI

formatReadsInner :: Int -> Int -> JArray Int -> String
formatReadsInner n l a =
    if n == l - 1 then
        show (elemAt a n)
    else
        (show (elemAt a n)) ++ ", " ++ (formatReadsInner (n + 1) l a)
                        
formatReads :: JArray Int -> String
formatReads a =
    let l = arrayLength a in
    if l == 0 then
        "[]"
    else
        "[" ++ (formatReadsInner 0 l a) ++ "]"

formatRegsInner :: [String] -> String
formatRegsInner l =
   case l of
     [] -> ""
     hd : tl ->
           let rest = formatRegsInner tl in
           if rest /= "" then
               hd ++ ", " ++ rest
           else
               hd

formatRegs l =
    "[" ++ (formatRegsInner l) ++ "]"

formatInstruction :: M6502 -> String
formatInstruction cpu =
    let i = M6502.getCurrentInstruction cpu in
    let bus = M6502.getCurrentBus cpu in
    let reads = M6502.getReads cpu in
    let writes = M6502.getWrites cpu in
    let isrc =
            filter ((/=) "") (listFromArray (M6502.getInstructionSources cpu))
    in
    (M6502.printState cpu) ++ " " ++ (Instruction.toString i) ++ " " ++ (formatReads reads) ++ " " ++ (formatReads writes) ++ " " ++ (formatRegs isrc)

doFrame cpu =
    let bus = M6502.getCurrentBus cpu in
    let reads = listFromArray (M6502.getReads cpu) in
    if reads == [640] then -- Read js port
        do
          pure (False, cpu)
    else
        do
          --stdout.print $ (M6502.printState cpu) ++ "\n"
          doFrame (M6502.next cpu)

doPreamble cpu =
    let bus = M6502.getCurrentBus cpu in
    let reads = listFromArray (M6502.getReads cpu) in
    if reads == [640] then -- We read the joystick port
        cpu
    else
        doPreamble (M6502.next cpu)

test =
    [
     3,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     3,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     0,
     1,
     3,
     0,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     3,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     3,
     1,
     1,
     1,
     1,
     3,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     3,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     3,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     3,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     3,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     2,
     2,
     2,
     2,
     2,
     3,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     3,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     3,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     3,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     3,
     2,
     2,
     2,
     2,
     2,
     2,
     2,
     3
    ]

mapInput i =
    case i of
      0 -> 0xff0bff
      1 -> 0xff0b7f
      2 -> 0xbf0bff
      _ -> 0xbf0b7f

-- $8D <- race start countdown
      
known endbus n =
    let row a =
            [ (Trick2600.readByte endbus (a + 0)),
              (Trick2600.readByte endbus (a + 1)),
              (Trick2600.readByte endbus (a + 2)),
              (Trick2600.readByte endbus (a + 3)),
              (Trick2600.readByte endbus (a + 4)),
              (Trick2600.readByte endbus (a + 5)),
              (Trick2600.readByte endbus (a + 6)),
              (Trick2600.readByte endbus (a + 7)),
            ]
    in
    "Timer " ++ (show (Trick2600.readByte endbus (0xb3 + n))) ++ "-" ++
        (show (Trick2600.readByte endbus (0xb5 + n))) ++ "-" ++
        (show (Trick2600.readByte endbus (0xb7 + n))) ++ "\n" ++
    "Position " ++ (show (Trick2600.readByte endbus (0xba + n))) ++ "-" ++ (show (Trick2600.readByte endbus (0xc2 + n))) ++ "\n" ++
    "80 " ++ (show (row 0x80)) ++ "\n" ++
    "88 " ++ (show (row 0x88)) ++ "\n" ++
    "90 " ++ (show (row 0x90)) ++ "\n" ++
    "98 " ++ (show (row 0x98)) ++ "\n" ++
    "a0 " ++ (show (row 0xa0)) ++ "\n" ++
    "a8 " ++ (show (row 0xa8)) ++ "\n" ++
    "b0 " ++ (show (row 0xb0)) ++ "\n" ++
    "b8 " ++ (show (row 0xb8)) ++ "\n" ++
    "c0 " ++ (show (row 0xc0)) ++ "\n" ++
    "c8 " ++ (show (row 0xc8)) ++ "\n" ++
    "d0 " ++ (show (row 0xd0)) ++ "\n" ++
    "d8 " ++ (show (row 0xd8))

doOneFrame v cpu =
    do
      (reset,endcpu) <- doFrame (M6502.setInput (M6502.next cpu) v)
      endbus <- pure $ M6502.getCurrentBus endcpu
      win <- pure $ (Byte.unsigned (Trick2600.readByte endbus 0xba)) >= 97
      lose <- pure $ Byte.unsigned (Trick2600.readByte endbus (0xa8)) >= 32
      stdout.print $ "Input " ++ (Int.toHexString v) ++ "\n"
      stdout.print $ (M6502.printState endcpu) ++ "\n"
      stdout.print $ (known endbus 0) ++ "\n"
      pure (win || lose || reset,endcpu)
      
doFrames n inputs cpu =
    case inputs of
      hd : tl ->
          do
            stdout.print $ "Frame " ++ (show n) ++ "\n"
            (reset,fcpu) <- doOneFrame hd cpu
            if reset then
                pure fcpu
            else
                doFrames (n + 1) tl fcpu
      [] ->
          do
            pure cpu

quiet = 0xff0b80
jsLeft = 0xbf0b80
jsRight = 0x7f0b80
button = 0xff0b00
buttonLeft = 0xbf0b00
reset = 0xff0a80

double t =
    case t of
      x : xs -> x : x : (double xs)
      [] -> []
        
times n v = if n == 0 then [] else (v : (times (n-1) v))
i1 =
    [
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0x7f0b8b,
     0x7f0b8b,
     0x7f0b8b,
     0x7f0b8b,
     0x7f0b8b,
     0x7f0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xbf0b0b,
     0xbf0b0b,
     0xbf0b0b,
     0xbf0b0b,
     0xbf0b0b,
     0xbf0b8b,
     0xbf0b8b,
     0xff0b8b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xbf0b8b,
     0xbf0b8b,
     0xbf0b8b,
     0xbf0b8b,
     0xff0b8b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xbf0b0b,
     0xbf0b0b,
     0xbf0b0b,
     0xbf0b8b,
     0xbf0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b
    ]
i2 =
    [
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xbf0b8b,
     0xbf0b8b,
     0xbf0b8b,
     0xbf0b8b,
     0xbf0b8b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b0b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b,
     0xff0b8b
    ]
inputs = i1 ++ i2
         
main _ =
    let trick = Trick2600.new "snoop/Dragster.bin" in
    let cpu = M6502.setInput (M6502.withBus (M6502.new ()) trick) quiet in
    do
      acpu <- pure $ doPreamble (M6502.next cpu)
      ncpu <- doFrames 1 inputs acpu
              
      stdout.print $ "end-cpu " ++ (M6502.printState ncpu) ++ "\n"
