module examples.Expr where

import examples.Util
import examples.FFI
    
data Expr
    = Const Int
    | BitSet Int Expr
    | IsZero Expr
    | Instr String [(Int,Expr)] [(String,Expr)] Expr
    | Plus Expr Expr
    | Rom Int
    | AND Expr Expr
    | Neg Expr
    | Borrow Expr Expr
    | Carry Expr Expr Expr
    | Overflow Expr Expr Expr
    | LSR Expr
    | XOR Expr Expr
    | ADC Expr Expr Expr
    | ASL Expr
    | SBC Expr Expr Expr
    | ROL Expr
    | OR Expr Expr
    | PrevFrame
      
derive Show Expr

data RegName = A | X | Y | N | Z | V | C | D
derive Show RegName
derive Eq RegName
       
data CPU =
    CPU
    { a :: Expr
    , x :: Expr
    , y :: Expr
    , n :: Expr
    , z :: Expr
    , v :: Expr
    , c :: Expr
    , d :: Expr
    }
derive Show CPU

data Mem2 a =
    Mem2
    { x0 :: a
    , x1 :: a
    , x2 :: a
    , x3 :: a
    , x4 :: a
    , x5 :: a
    , x6 :: a
    , x7 :: a
    , x8 :: a
    , x9 :: a
    , xa :: a
    , xb :: a
    , xc :: a
    , xd :: a
    , xe :: a
    , xf :: a
    }
derive Show (Mem2 a)
          
type Mem = Mem2 (Mem2 Expr)

data Branch = Branch { pc :: Int, flag :: String, val :: Expr }
derive Show Branch
data Desc = Desc { mem :: Mem, cpu :: CPU, sta :: [String], path :: [Branch] }
derive Show Desc
    
formatReadsInner :: Int -> Int -> JArray Int -> String
formatReadsInner n l a =
    if n == l - 1 then
        show (elemAt a n)
    else
        (show (elemAt a n)) ++ ", " ++ (formatReadsInner (n + 1) l a)
                        
formatReads :: JArray Int -> String
formatReads a =
    let l = arrayLength a in
    if l == 0 then
        "[]"
    else
        "[" ++ (formatReadsInner 0 l a) ++ "]"

formatRegsInner :: [String] -> String
formatRegsInner l =
   case l of
     [] -> ""
     hd : tl ->
           let rest = formatRegsInner tl in
           if rest /= "" then
               hd ++ ", " ++ rest
           else
               hd

formatRegs l =
    "[" ++ (formatRegsInner l) ++ "]"

formatInstruction :: M6502 -> String
formatInstruction cpu =
    let i = M6502.getCurrentInstruction cpu in
    let name = Instruction.getName i in
    let bus = M6502.getCurrentBus cpu in
    let reads = M6502.getReads cpu in
    let writes = M6502.getWrites cpu in
    let isrc =
            filter ((/=) "") (listFromArray (M6502.getInstructionSources cpu))
    in
    (M6502.printState cpu) ++ " " ++ name ++ " " ++ (formatReads reads) ++ " " ++ (formatReads writes) ++ " " ++ (formatRegs isrc)

startMem2 =
    Mem2
    { x0 = Const 0
    , x1 = Const 0
    , x2 = Const 0
    , x3 = Const 0
    , x4 = Const 0
    , x5 = Const 0
    , x6 = Const 0
    , x7 = Const 0
    , x8 = Const 0
    , x9 = Const 0
    , xa = Const 0
    , xb = Const 0
    , xc = Const 0
    , xd = Const 0
    , xe = Const 0
    , xf = Const 0
    }
startFrameMem2 =
    Mem2
    { x0 = PrevFrame
    , x1 = PrevFrame
    , x2 = PrevFrame
    , x3 = PrevFrame
    , x4 = PrevFrame
    , x5 = PrevFrame
    , x6 = PrevFrame
    , x7 = PrevFrame
    , x8 = PrevFrame
    , x9 = PrevFrame
    , xa = PrevFrame
    , xb = PrevFrame
    , xc = PrevFrame
    , xd = PrevFrame
    , xe = PrevFrame
    , xf = PrevFrame
    }
    
startMem =
    Mem2
    { x0 = startMem2
    , x1 = startMem2
    , x2 = startMem2
    , x3 = startMem2
    , x4 = startMem2
    , x5 = startMem2
    , x6 = startMem2
    , x7 = startMem2
    , x8 = startMem2
    , x9 = startMem2
    , xa = startMem2
    , xb = startMem2
    , xc = startMem2
    , xd = startMem2
    , xe = startMem2
    , xf = startMem2
    }
startFrameMem =
    Mem2
    { x0 = startFrameMem2
    , x1 = startFrameMem2
    , x2 = startFrameMem2
    , x3 = startFrameMem2
    , x4 = startFrameMem2
    , x5 = startFrameMem2
    , x6 = startFrameMem2
    , x7 = startFrameMem2
    , x8 = startFrameMem2
    , x9 = startFrameMem2
    , xa = startFrameMem2
    , xb = startFrameMem2
    , xc = startFrameMem2
    , xd = startFrameMem2
    , xe = startFrameMem2
    , xf = startFrameMem2
    }

startCpu =
    CPU
    { a = Const 0
    , x = Const 0
    , y = Const 0
    , n = Const 0
    , z = Const 0
    , v = Const 0
    , c = Const 0
    , d = Const 0
    }
startFrameCpu =
    CPU
    { a = PrevFrame
    , x = PrevFrame
    , y = PrevFrame
    , n = PrevFrame
    , z = PrevFrame
    , v = PrevFrame
    , c = PrevFrame
    , d = PrevFrame
    }

startupExprs = Desc { mem = startMem, cpu = startCpu, sta = [], path = [] }
startFrame = Desc { mem = startFrameMem, cpu = startFrameCpu, sta = [], path = [] }

getA CPU { a = v, x = _, y = _, n = _, z = _, v = _, c = _, d = _ } = v
getX CPU { a = _, x = v, y = _, n = _, z = _, v = _, c = _, d = _ } = v
getY CPU { a = _, x = _, y = v, n = _, z = _, v = _, c = _, d = _ } = v
getN CPU { a = _, x = _, y = _, n = v, z = _, v = _, c = _, d = _ } = v
getZ CPU { a = _, x = _, y = _, n = _, z = v, v = _, c = _, d = _ } = v
getV CPU { a = _, x = _, y = _, n = _, z = _, v = v, c = _, d = _ } = v
getC CPU { a = _, x = _, y = _, n = _, z = _, v = _, c = v, d = _ } = v
getD CPU { a = _, x = _, y = _, n = _, z = _, v = _, c = _, d = v } = v

getMem2 m (Mem2 { x0 = x0, x1 = x1, x2 = x2, x3 = x3, x4 = x4, x5 = x5, x6 = x6, x7 = x7, x8 = x8, x9 = x9, xa = xa, xb = xb, xc = xc, xd = xd, xe = xe, xf = xf }) =
    case m of
      0 -> x0
      1 -> x1
      2 -> x2
      3 -> x3
      4 -> x4
      5 -> x5
      6 -> x6
      7 -> x7
      8 -> x8
      9 -> x9
      10 -> xa
      11 -> xb
      12 -> xc
      13 -> xd
      14 -> xe
      x -> xf

getMem :: Int -> Mem -> Expr
getMem a mem =
    if a `mod` 8192 > 4096 then
        Rom a
    else
        getMem2 (a `mod` 16) (getMem2 (a `div` 16) mem)

setMem2 :: Int -> m -> Mem2 m -> Mem2 m
setMem2 m v mem =
    case m of
      0 -> Mem2 { x0 = v, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      1 -> Mem2 { x0 = getMem2 0x0 mem, x1 = v, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      2 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = v, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      3 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = v, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      4 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = v, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      5 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = v, x5 = v, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      6 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = v, x6 = v, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      7 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = v, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      8 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = v, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      9 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = v, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      10 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = v, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      11 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = v, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      12 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = v, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      13 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = v, xe = getMem2 0xe mem, xf = getMem2 0xf mem }
      14 -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = v, xf = getMem2 0xf mem }
      x -> Mem2 { x0 = getMem2 0x0 mem, x1 = getMem2 0x1 mem, x2 = getMem2 0x2 mem, x3 = getMem2 0x3 mem, x4 = getMem2 0x4 mem, x5 = getMem2 0x5 mem, x6 = getMem2 0x6 mem, x7 = getMem2 0x7 mem, x8 = getMem2 0x8 mem, x9 = getMem2 0x9 mem, xa = getMem2 0xa mem, xb = getMem2 0xb mem, xc = getMem2 0xc mem, xd = getMem2 0xd mem, xe = getMem2 0xe mem, xf = v }

setMem :: Int -> Expr -> Mem -> Mem
setMem m v mem =
    let m2 = setMem2 (m `mod` 16) v (getMem2 (m `div` 16) mem) in
    setMem2 (m `div` 16) m2 mem

exprOfCPU nm (CPU { a = a, x = x, y = y, n = n, z = z, v = v, c = c, d = d }) =
    case nm of
      "A" -> a
      "X" -> x
      "Y" -> y
      "N" -> n
      "Z" -> z
      "V" -> v
      "C" -> c
      _   -> d

cpuWithExpr :: String -> Expr -> CPU -> CPU
cpuWithExpr nm v cpu =
    case nm of
      "A" -> CPU { a = v, x = getX cpu, y = getY cpu, n = getN cpu, z = getZ cpu, v = getV cpu, c = getC cpu, d = getD cpu }
      "X" -> CPU { a = getA cpu, x = v, y = getY cpu, n = getN cpu, z = getZ cpu, v = getV cpu, c = getC cpu, d = getD cpu }
      "Y" -> CPU { a = getA cpu, x = getX cpu, y = v, n = getN cpu, z = getZ cpu, v = getV cpu, c = getC cpu, d = getD cpu }
      "N" -> CPU { a = getA cpu, x = getX cpu, y = getY cpu, n = v, z = getZ cpu, v = getV cpu, c = getC cpu, d = getD cpu }
      "Z" -> CPU { a = getA cpu, x = getX cpu, y = getY cpu, n = getN cpu, z = v, v = getV cpu, c = getC cpu, d = getD cpu }
      "V" -> CPU { a = getA cpu, x = getX cpu, y = getY cpu, n = getN cpu, z = getZ cpu, v = v, c = getC cpu, d = getD cpu }
      "C" -> CPU { a = getA cpu, x = getX cpu, y = getY cpu, n = getN cpu, z = getZ cpu, v = getV cpu, c = v, d = getD cpu }
      "D" -> CPU { a = getA cpu, x = getX cpu, y = getY cpu, n = getN cpu, z = getZ cpu, v = getV cpu, c = getC cpu, d = v }
      _   -> cpu

readSource :: Char -> String -> [String]
readSource m r =
    if String.charAt r 0 == m then
        [substr r 1 (String.length r)]
    else
        []

sources :: M6502 -> [String]
sources cpu =
    filter nonempty (listFromArray (M6502.getInstructionSources cpu))

readMemoryExprs :: Mem -> [Int] -> [(Int,Expr)]
readMemoryExprs em reads =
    map (\r -> (r,getMem r em)) reads

readRegisterExprs :: CPU -> [String] -> [(String,Expr)]
readRegisterExprs ec readSources =
    map (\r -> (r,exprOfCPU r ec)) readSources
